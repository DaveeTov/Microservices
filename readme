# PROYECTO MICROSERVICIOS - BACKEND TODO APP

Este proyecto implementa una arquitectura de microservicios para una aplicaci√≥n de tareas.
Usa Flask, SQLite y JWT en un entorno Linux (idealmente bajo WSL en Windows o PowerShell).

---

## üß∞ TECNOLOG√çAS USADAS

- Python 3
- Flask
- SQLite (base de datos local)
- JWT (JSON Web Tokens)
- Requests (proxy en API Gateway)

---

## üìÅ ESTRUCTURA DE ARCHIVOS
auth_service/app.py # Servicio de autenticaci√≥n (registro, login, JWT)
user_service/app.py # Servicio de usuarios (CRUD usuarios)
task_service/app.py # Servicio de tareas (CRUD tareas con estados)
api_gateway/app.py # API Gateway que enruta peticiones
main_database.db # Base de datos SQLite compartida
requirements.txt # Dependencias Python
start_services.sh # Inicia todos los servicios
stop_services.sh # Detiene todos los servicios


---

## ‚úÖ REQUISITOS PREVIOS

- Python 3
- [WSL](https://learn.microsoft.com/en-us/windows/wsl/) (Windows Subsystem for Linux) o terminal Linux
- PowerShell (si est√°s en Windows y no usas WSL)
- `curl` instalado
- Postman (opcional)

---

## üîß 1. CREAR ENTORNO VIRTUAL E INSTALAR DEPENDENCIAS

### En **WSL / Linux**:

```bash
python3 -m venv venv
source venv/bin/activate
pip install -r requirements.txt

python -m venv venv
.\venv\Scripts\activate
pip install -r requirements.txt

üöÄ 2. INICIAR SERVICIOS Solo desdeEn WSL / Linux:

./start_services.sh

üõë 3. DETENER SERVICIOS
./stop_services.sh

4. PROBAR FUNCIONALIDAD (con curl en WSL o PowerShell)

curl -X POST http://localhost:5000/auth/register \
  -H "Content-Type: application/json" \
  -d '{
    "username": "usuario5",
    "password": "12345678",
    "email": "usuario4@correo.com",
    "birthdate": "1990-01-01",
    "secret_question": "Color favorito?",
    "secret_answer": "Azul"
}'

4.1 Registro de usuario
curl -X POST http://localhost:5000/auth/register \
  -H "Content-Type: application/json" \
  -d '{
    "username": "usuario5",
    "password": "12345678",
    "email": "usuario4@correo.com",
    "birthdate": "1990-01-01",
    "secret_question": "Color favorito?",
    "secret_answer": "Azul"
}'

4.2 Login
curl -X POST http://localhost:5000/auth/login \
  -H "Content-Type: application/json" \
  -d '{
    "username": "usuario5",
    "password": "12345678"
}'

4.3 Crear tarea
curl -X POST http://localhost:5000/tasks \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer <TOKEN generado>s" \
  -d '{
    "name": "Terminar proyecto",
    "description": "Completar backend para la app",
    "deadline": "2025-07-15T23:59:00"
}'

4.4 Listar tareas
curl -X GET http://localhost:5000/tasks \
  -H "Authorization: Bearer <TOKEN generado>"

4.5 Actualizar tarea
curl -X PUT http://localhost:5000/tasks/<id de tarea> \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6NCwidXNlcm5hbWUiOiJ1c3VhcmlvNCIsImV4cCI6MTc1MTA3ODA0MH0.tr5pmXyjowuFhyj-YoY2uC158NkLDN-Egs_byqdleaI" \
  -d '{
    "status": "Paused"
}'

4.6 Eliminar tarea (borrado l√≥gico)

curl -X DELETE http://localhost:5000/tasks/3 \
  -H "Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6NCwidXNlcm5hbWUiOiJ1c3VhcmlvNCIsImV4cCI6MTc1MTA3ODA0MH0.tr5pmXyjowuFhyj-YoY2uC158NkLDN-Egs_byqdleaI"


